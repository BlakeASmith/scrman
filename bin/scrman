#!/usr/bin/env ruby
# frozen_string_literal: true

# Setup bundler to use vendored gems
require 'bundler/setup'

# Add the lib directory to the load path
lib_dir = File.expand_path('../lib', __dir__)
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

require 'thor'
require 'helpers'
require 'config'
require 'language'
require 'formatter'

class Scrman < Thor
  desc "ls [PATTERN]", "List installed scripts"
  option :lang, aliases: :l, type: :string, desc: "filter by language"
  option :format, aliases: :f, type: :string, desc: "output format (tsv, json, yml, csv)"
  def ls(pattern = '*')
    format = options[:format] || $CONFIG.output_format
    lang_filter = options[:lang]
    
    scripts = []
    
    # Get all language directories
    Dir.glob(File.join($SCRIPTS_PATH, '*')).each do |lang_dir|
      next unless File.directory?(lang_dir)
      
      lang_name = File.basename(lang_dir)
      next if lang_filter && lang_name != lang_filter
      
      # Find language configuration
      lang_config = $CONFIG.languages[lang_name]
      next unless lang_config
      
      extension = lang_config['extension']
      
      # Find scripts matching pattern
      Dir.glob(File.join(lang_dir, "#{pattern}.#{extension}")).each do |script_path|
        script_name = File.basename(script_path, ".#{extension}")
        scripts << { name: script_name, language: lang_name }
      end
    end
    
    # Sort scripts by name
    scripts.sort_by! { |s| s[:name] }
    
    # Use formatter utility
    formatter = Formatter.new(format)
    headers = ['name', 'language']
    puts formatter.format(scripts, headers)
  end

  desc "new NAME", "Create a new script"
  option :lang, aliases: :l, type: :string, desc: "the language of the script"
  option :link, aliases: :b, type: :boolean, default: true, desc: "install to the bin"
  option :edit, aliases: :e, type: :boolean, default: true, desc: "open the script in the editor"
  def new(name)
    lang = find_language(options[:lang] || $CONFIG.default_language) || raise("Language #{options[:lang] || $CONFIG.default_language} not found")
    path = lang.path(name)

    ensure_dir lang.scripts_path
    if File.exist? path
      abort "Script #{name} already exists"
    end

    File.write(path, lang.shebang)
    FileUtils.chmod("+x", path)

    if options[:link]
      bin_path = "#{$BIN}/#{name}"
      unless File.exist? bin_path
        FileUtils.ln_s path, bin_path
      end
    end

    if options[:edit]
      open_editor path
    end
  end

  desc "rm NAME", "Remove a script and its symlink"
  option :lang, aliases: :l, type: :string, desc: "the language of the script"
  option :force, aliases: :f, type: :boolean, default: false, desc: "force removal without confirmation"
  def rm(name)
    # Find the script across all languages or specific language
    script_found = false
    script_path = nil
    script_lang = nil
    
    if options[:lang]
      # Look in specific language directory
      lang_config = $CONFIG.languages[options[:lang]]
      if lang_config
        lang = Language.new(options[:lang], lang_config['extension'])
        path = lang.path(name)
        if File.exist?(path)
          script_found = true
          script_path = path
          script_lang = options[:lang]
        end
      end
    else
      # Search across all language directories
      Dir.glob(File.join($SCRIPTS_PATH, '*')).each do |lang_dir|
        next unless File.directory?(lang_dir)
        
        lang_name = File.basename(lang_dir)
        lang_config = $CONFIG.languages[lang_name]
        next unless lang_config
        
        extension = lang_config['extension']
        path = File.join(lang_dir, "#{name}.#{extension}")
        
        if File.exist?(path)
          script_found = true
          script_path = path
          script_lang = lang_name
          break
        end
      end
    end
    
    unless script_found
      abort "Script '#{name}' not found#{options[:lang] ? " in language '#{options[:lang]}'" : ''}"
    end
    
    # Confirm removal unless force is specified
    unless options[:force]
      print "Are you sure you want to remove script '#{name}' (#{script_lang})? [y/N] "
      response = STDIN.gets.chomp.downcase
      unless response == 'y' || response == 'yes'
        puts "Operation cancelled."
        exit 0
      end
    end
    
    # Remove the script file
    FileUtils.rm(script_path)
    puts "Removed script file: #{script_path}"
    
    # Remove symlink from bin directory
    bin_path = "#{$BIN}/#{name}"
    if File.exist?(bin_path) || File.symlink?(bin_path)
      FileUtils.rm(bin_path)
      puts "Removed symlink: #{bin_path}"
    end
    
    puts "Script '#{name}' (#{script_lang}) has been removed successfully."
  end

  desc "edit NAME", "Open an existing script in the editor"
  option :lang, aliases: :l, type: :string, desc: "the language of the script"
  def edit(name)
    # Find the script across all languages or specific language
    script_found = false
    script_path = nil
    script_lang = nil
    
    if options[:lang]
      # Look in specific language directory
      lang_config = $CONFIG.languages[options[:lang]]
      if lang_config
        lang = Language.new(options[:lang], lang_config['extension'])
        path = lang.path(name)
        if File.exist?(path)
          script_found = true
          script_path = path
          script_lang = options[:lang]
        end
      end
    else
      # Search across all language directories
      Dir.glob(File.join($SCRIPTS_PATH, '*')).each do |lang_dir|
        next unless File.directory?(lang_dir)
        
        lang_name = File.basename(lang_dir)
        lang_config = $CONFIG.languages[lang_name]
        next unless lang_config
        
        extension = lang_config['extension']
        path = File.join(lang_dir, "#{name}.#{extension}")
        
        if File.exist?(path)
          script_found = true
          script_path = path
          script_lang = lang_name
          break
        end
      end
    end
    
    unless script_found
      abort "Script '#{name}' not found#{options[:lang] ? " in language '#{options[:lang]}'" : ''}"
    end
    
    puts "Opening script '#{name}' (#{script_lang}) in editor..."
    open_editor(script_path)
  end
end

Scrman.start(ARGV)

